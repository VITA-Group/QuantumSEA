import argparse
import itertools


if __name__ == '__main__':
    ground_truth_acc = [
        0.4266666667,
        0.3266666667,
        0.4633333333,
        0.5166666667,
        0.58,
        0.38,
        0.2733333333,
        0.3833333333,
        0.56,
        0.5133333333,
        0.2733333333,
        0.29,
        0.2166666667,
        0.5633333333,
        0.2833333333,
        0.2566666667,
        0.2733333333,
        0.27,
        0.5633333333,
        0.21,
        0.2766666667,
        0.27,
        0.21,
        0.5166666667,
        0.2866666667,
        0.2466666667,
        0.2633333333,
        0.2066666667,
        0.5366666667,
        0.26,
        0.2566666667,
        0.2633333333,
        0.21,
        0.42,
        0.2533333333,
        0.26,
        0.26,
        0.2033333333,
        0.3666666667,
        0.2,
        0.41,
        0.3966666667,
        0.4666666667,
        0.5666666667,
        0.5166666667,
        0.5633333333,
        0.4933333333,
        0.6266666667,
        0.49,
        0.6433333333,
        0.62,
        0.6166666667,
        0.6333333333,
        0.5866666667,
        0.39,
        0.25,
        0.3133333333,
        0.44,
        0.4866666667,
        0.5133333333,
        0.4933333333,
        0.54,
        0.2066666667,
        0.5466666667,
        0.2466666667,
        0.2833333333,
        0.3133333333,
        0.6566666667,
        0.1733333333,
        0.42,
        0.3533333333,
        0.5033333333,
    ]

    ground_truth_loss = [
        1.276095691,
        1.279419841,
        1.284856654,
        1.216282405,
        1.244265463,
        1.306156185,
        1.273229101,
        1.281365576,
        1.225898807,
        1.316286171,
        1.322995595,
        1.290895561,
        1.354059471,
        1.255752894,
        1.385618092,
        1.3181584,
        1.329951532,
        1.346505127,
        1.297784433,
        1.389871041,
        1.314624737,
        1.33899859,
        1.406270538,
        1.290571196,
        1.383329413,
        1.34569929,
        1.373627586,
        1.428856956,
        1.318890211,
        1.390809342,
        1.325414488,
        1.420726492,
        1.432678436,
        1.344447062,
        1.382576992,
        1.352957461,
        1.389043892,
        1.422317922,
        1.362992318,
        1.389293288,
        1.23223466,
        1.273471377,
        1.205483841,
        1.163975873,
        1.218040447,
        1.1497525,
        1.248216794,
        1.158375527,
        1.250807397,
        1.168489924,
        1.118905186,
        1.153691004,
        1.132069501,
        1.211369521,
        1.31313863,
        1.349845327,
        1.370177,
        1.276013835,
        1.33403361,
        1.263323653,
        1.346263558,
        1.290314321,
        1.41114929,
        1.25505076,
        1.380080428,
        1.36543489,
        1.380669633,
        1.28417746,
        1.419352754,
        1.351456012,
        1.387434853,
        1.357507798,
    ]

    succ_all = [
        0.893467335,
        0.8529683222,
        0.8529683222,
        0.811293949,
        0.6835691029,
        0.8162580202,
        0.7426975727,
        0.7426975727,
        0.6715931005,
        0.4828157969,
        0.7457207773,
        0.6466824969,
        0.6466824969,
        0.5559480546,
        0.2602606583,
        0.6812790366,
        0.5630801382,
        0.5630801382,
        0.4602165198,
        0.1623994316,
        0.6224060532,
        0.4902857948,
        0.4902857948,
        0.3809694868,
        0.1117870026,
        0.5686206007,
        0.4269022193,
        0.4269022193,
        0.3153684052,
        0.06505605195,
        0.5194830382,
        0.3717127984,
        0.3717127984,
        0.2610635089,
        0.03839129725,
        0.4745917167,
        0.3236582015,
        0.3236582015,
        0.21610965,
        0.02452190744,
        0.8130150543,
        0.8933933695,
        0.8081783965,
        0.847801064,
        0.7791368388,
        0.847801064,
        0.5303873042,
        0.7381439561,
        0.4666755579,
        0.7011962119,
        0.7699857505,
        0.7671089968,
        0.672560919,
        0.5268906842,
        0.5373345749,
        0.4440235392,
        0.2429986663,
        0.4488879086,
        0.319495918,
        0.5361842411,
        0.156063391,
        0.3862868037,
        0.3957361585,
        0.3638134493,
        0.2227472356,
        0.2410208053,
        0.1933664065,
        0.2498843142,
        0.2177626382,
        0.2035842988,
        0.07891072165,
        0.2053344669,
    ]

    parser = argparse.ArgumentParser()
    parser.add_argument('--supernet', type=str)
    parser.add_argument('--gpu', type=int)
    args = parser.parse_args()
    print(args.supernet)

    cnt = 0
    loss_all = []
    with open(f'logs/super/eval_subnet_tq_ratiorand_'
              f'insuper_{args.supernet}.txt',
              'r') as rfid:
    # with open(f'logs/super/eval_subnet_noise_x2_opt2_ratiorand_'
    #           f'insuper_{args.supernet}.txt',
    #           'r') as rfid:
        for line in rfid:
            if 'Loss' in line:
                cnt += 1
                if cnt % 2:
                    loss_all.append(eval(line.split(' ')[-1]))

    loss_all = [loss_all[k] / succ_all[k] for k in range(len(loss_all))]

    corrects = 0
    cnt = 0
    for comb in itertools.combinations_with_replacement(
            list(range(len(ground_truth_loss))), 2):

        a = ground_truth_loss[comb[0]]
        b = ground_truth_loss[comb[1]]
        a_est = loss_all[comb[0]]
        b_est = loss_all[comb[1]]
        # if a < 0.5 or b < 0.5:
        #     continue
        cnt += 1
        if not (a >= b) ^ (a_est >= b_est):
            corrects += 1

    print(f"corrects {corrects}, total {cnt}, Rate: {corrects / cnt}")
