import argparse
import itertools
from scipy import stats


if __name__ == '__main__':
    ground_truth_acc = [
        0.4103921097,
        0.4592254029,
        0.5126293,
        0.6307433245,
        0.5157565552,
        0.5770988694,
        0.74621121,
        0.7430839548,
        0.7144575415,
        0.7353860957,
        0.6408467645,
        0.7495790233,
        0.7830165985,
        0.6863122444,
        0.7808515757,
        0.781813808,
        0.7753187395,
        0.7616069281,
        0.7021890787,
        0.7250420977,
        0.7897522252,
        0.7895116671,
        0.7007457301,
        0.8008178975,
        0.8061101756,
        0.7317777243,
        0.7921578061,
        0.8005773394,
        0.8051479432,
        0.7895116671,
        0.804666827,
        0.8162136156,
    ]

    # ground_truth_loss = [
    #     1.227932215,
    #     1.183494568,
    #     1.140781879,
    #     1.056100368,
    #     1.167975664,
    #     1.069411993,
    #     1.026968598,
    #     1.060793042,
    #     1.017929196,
    #     0.998534441,
    #     1.036644816,
    #     0.9920506477,
    #     0.9637789726,
    #     1.002362967,
    #     0.9666743875,
    #     0.9466921091,
    #     0.9731373191,
    #     0.9878319502,
    #     1.046772957,
    #     1.029529333,
    #     0.959556222,
    #     0.9609594345,
    #     0.9877921343,
    #     0.933486104,
    #     0.9113298059,
    #     1.009510994,
    #     0.973739624,
    #     0.9130330086,
    #     0.9320757985,
    #     0.9534182549,
    #     0.9209256172,
    #     0.9206607342,
    # ]
    ground_truth_loss = [
        # 1.251312613,
        # 1.206900716,
        # 1.217935443,
        # 1.076185346,
        # 1.052040577,
        # 1.245998144,
        # 1.128251195,
        # 1.165869713,
        # 1.011000872,
        # 0.9784647226,
        # 1.229257464,
        # 1.065639853,
        # 1.114256978,
        # 0.9727173448,
        # 0.9656341076,
        # 1.228745103,
        # 1.069212556,
        # 1.113019466,
        # 0.9471424222,
        # 0.91166085,
        # 1.227254033,
        # 1.05306685,
        # 1.086424232,
        # 0.9468999505,
        # 0.9130370021,
        # 1.227954745,
        # 1.054544806,
        # 1.087273598,
        # 0.9213072062,
        # 0.9069637656,
        # 1.234271526,
        # 1.049979568,
        # 1.078618169,
        # 0.9178112149,
        # 0.8910576701,
        # 1.228218913,
        # 1.04969728,
        # 1.077585459,
        # 0.9398220181,
        # 0.8893611431,
        1.172919869,
        1.174831748,
        1.190154433,
        1.09282589,
        1.179687142,
        1.095748186,
        1.009546638,
        1.039857149,
        1.023582697,
        1.061262965,
        1.02767837,
        1.061795712,
        1.000618219,
        1.015908122,
        0.9676553011,
        0.968763411,
        0.9473308325,
        0.9578924179,
        0.9661900401,
        0.9710415006,
        0.9486585855,
        0.9542745352,
        0.9456375241,
        0.9971755743,
        0.9363359213,
        0.9315931201,
        0.9280217886,
        0.9378393888,
        0.9523043633,
        0.9223439693,
        0.9052116275,
        0.9448692799,
    ]

    loss2 = [
        # 1.24260115623474,
        # 1.20655417442322,
        # 1.24961066246033,
        # 1.11279189586639,
        # 1.10644900798798,
        # 1.24529528617859,
        # 1.2186074256897,
        # 1.25412786006928,
        # 1.12281560897827,
        # 1.09466123580933,
        # 1.28340327739716,
        # 1.23456275463104,
        # 1.23476827144623,
        # 1.1384414434433,
        # 1.10138297080994,
        # 1.26663661003113,
        # 1.21742904186249,
        # 1.25985884666443,
        # 1.12155389785767,
        # 1.12274098396301,
        # 1.26574110984802,
        # 1.21607434749603,
        # 1.24380648136139,
        # 1.12988698482513,
        # 1.1064178943634,
        # 1.26615858078003,
        # 1.21547472476959,
        # 1.25858056545258,
        # 1.13438594341278,
        # 1.10230362415314,
        # 1.26201450824738,
        # 1.21179223060608,
        # 1.27607309818268,
        # 1.13480198383331,
        # 1.10910391807556,
        # 1.26080977916718,
        # 1.2112979888916,
        # 1.27715981006622,
        # 1.13369786739349,
        # 1.12200164794922,
        1.24119555950165,
        1.1513854265213,
        1.22021853923798,
        1.11409747600555,
        1.2748498916626,
        1.19886648654938,
        1.10981023311615,
        1.11392962932587,
        1.18610620498657,
        1.11527872085571,
        1.17504906654358,
        1.10851168632507,
        1.18452942371368,
        1.12484109401703,
        1.07006323337555,
        1.13759791851044,
        1.25225865840912,
        1.14658832550049,
        1.10430800914764,
        1.13830959796906,
        1.17093086242676,
        1.25959539413452,
        1.19436573982239,
        1.11587977409363,
        1.2162321805954,
        1.18270814418793,
        1.13395047187805,
        1.0866185426712,
        1.19614899158478,
        1.19551885128021,
        1.14125299453735,
        1.13836407661438,
    ]

    parser = argparse.ArgumentParser()
    parser.add_argument('--supernet', type=str)
    parser.add_argument('--gpu', type=int)
    args = parser.parse_args()
    print(args.supernet)

    cnt = 0
    loss_all = []
    # with open(f'logs/super/eval_subnet_noise_x2_opt2_ratiorand_'
    #           f'insuper_{args.supernet}.txt',
    #           'r') as rfid:
    with open(
            f'logs/sfsuper/eval_subnet_tq_insuper_u3cu3_s0_plain_blk8s1_ws1_os1.txt',
              'r') as rfid:
        for line in rfid:
            if 'Loss' in line:
                cnt += 1
                if cnt % 2:
                    loss_all.append(eval(line.split(' ')[-1]))

    # loss_all = [loss_all[k] / succ_all[k] for k in range(len(loss_all))]

    # corrects = 0
    # cnt = 0
    # for comb in itertools.combinations_with_replacement(
    #         list(range(len(ground_truth_loss))), 2):
    #
    #     a = ground_truth_loss[comb[0]]
    #     b = ground_truth_loss[comb[1]]
    #     a_est = loss_all[comb[0]]
    #     b_est = loss_all[comb[1]]
    #     # if a < 0.5 or b < 0.5:
    #     #     continue
    #     cnt += 1
    #     if not (a >= b) ^ (a_est >= b_est):
    #         corrects += 1

    rho, p = stats.spearmanr(ground_truth_loss, loss2)

    print(f"spearman rho {rho}, p {p}")
